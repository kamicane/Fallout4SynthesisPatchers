using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.FormKeys.Fallout4;
using Mutagen.Bethesda.WPF.Reflection.Attributes;

namespace Clarify {
	public class Program {
		private static Lazy<ProgramSettings> lazySettings = null!;
		private static ProgramSettings localSettings => lazySettings.Value;
		//private static IPatcherState<IFallout4Mod, IFallout4ModGetter> localState = null!;
		public static async Task<int> Main (string[] args) {
			return await SynthesisPipeline.Instance
				.AddPatch<IFallout4Mod, IFallout4ModGetter>(RunPatch)
				.SetAutogeneratedSettings(
					nickname: "Settings",
					path: "Clarify_Settings.json",
					out lazySettings
				)
				.SetTypicalOpen(GameRelease.Fallout4, "SYN_Clarity.esp")
				.Run(args);
		}

		public static void RunPatch (IPatcherState<IFallout4Mod, IFallout4ModGetter> state) {

			if (localSettings.removeBloom) {
				var imageSpaces = state.LoadOrder.PriorityOrder.ImageSpace().WinningOverrides();
				foreach (var imageSpace in imageSpaces) {
					var iso = state.PatchMod.ImageSpaces.GetOrAddAsOverride(imageSpace);
					iso.HdrBloomScale = 0.0f;
					iso.HdrBloomThreshold = 10.0f;

					//iso.CinematicSaturation = 1.0f;
					//iso.CinematicContrast = 1.0f;
				}
			}

			if (localSettings.standardizeFog) {
				var lightningTemplates = state.LoadOrder.PriorityOrder.LightingTemplate().WinningOverrides();
				foreach (var lightningTemplate in lightningTemplates) {
					var lto = state.PatchMod.LightingTemplates.GetOrAddAsOverride(lightningTemplate);
					lto.FogNear = 1000.0f;
					lto.FogFar = 60000.0f;
					lto.FogPower = 0.5f;

					lto.NearHeightRange = 10000.0f;
					//lto.FarHeightRange = 10000.0f; // is missing from mutagen

					lto.HighDensityScale = 1.0f;

					lto.FogNearScale = 1.0f;
					lto.FogFarScale = 1.0f;

					lto.FogHighNearScale = 1.0f;
					lto.FogHighFarScale = 1.0f;
				}
			}

			if (localSettings.standardizeFog || localSettings.removeGodRays) {
				var weathers = state.LoadOrder.PriorityOrder.Weather().WinningOverrides();
				foreach (var weather in weathers) {
					var weo = state.PatchMod.Weather.GetOrAddAsOverride(weather);
					if (localSettings.standardizeFog) {
						weo.FogDistanceDayNear = 1000.0f;
						weo.FogDistanceDayFar = 60000.0f;

						weo.FogDistanceNightNear = 1000.0f;
						weo.FogDistanceNightFar = 60000.0f;
					}

					if (localSettings.removeGodRays) {
						weo.GodRays = new() {
							GodRaySunrise = Fallout4.GodRays.None_Rays,
							GodRayDay = Fallout4.GodRays.None_Rays,
							GodRaySunset = Fallout4.GodRays.None_Rays,
							GodRayNight = Fallout4.GodRays.None_Rays,
							GodRayEarlySunrise = Fallout4.GodRays.None_Rays,
							GodRayLateSunrise = Fallout4.GodRays.None_Rays,
							GodRayEarlySunset = Fallout4.GodRays.None_Rays,
							GodRayLateSunset = Fallout4.GodRays.None_Rays
						};
					}
				}
			}
		}

		//var cells = state.LoadOrder.PriorityOrder.Cell().WinningOverrides();
		//foreach (var cell in cells) {
		//	if (cell.Lighting == null) {
		//		Console.WriteLine($"{cell.EditorID} NO Lighting");
		//	} else if (cell.Lighting.FogFar != 60000.0f || cell.Lighting.FogNear != 1000.0f || cell.Lighting.FogPower != 0.5f) {
		//		Console.WriteLine($"{cell.EditorID} FIX Lighting needed");
		//	}
		//}
	}

	public class ProgramSettings {
		[MaintainOrder]
		[SettingName("Remove Bloom")]
		public bool removeBloom = true;

		[MaintainOrder]
		[SettingName("Remove God Rays")]
		public bool removeGodRays = true;

		[MaintainOrder]
		[SettingName("Standardized, Less Harsh Fog Settings")]
		public bool standardizeFog = true;
	}

}
